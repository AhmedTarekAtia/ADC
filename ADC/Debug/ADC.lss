
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000021d6  0000224a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001740  00000000  00000000  00002254  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000aca  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000445e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000459e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000470e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000083dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008bab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <main>
      7a:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e6       	ldi	r26, 0x62	; 98
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e6       	ldi	r24, 0x62	; 98
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <HLCD_VoidSendChar>:
#include "MDIO_Interface.h"
#include "HLCD_CONFIG.h"
#include <avr/delay.h>

void HLCD_VoidSendChar(u8 Copy_U8Data)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	ab 97       	sbiw	r28, 0x2b	; 43
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set RS=1, to send data*/
	MDIO_VoidSetPinValue(Copy_RSPort,PIN0,1);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
	/*Set Rw=0, to write */
	MDIO_VoidSetPinValue(Copy_RWPort,PIN1,0);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
	/*Portc = data*/
	MDIO_VoidSetPortValue(PORTC, Copy_U8Data);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	6b a5       	ldd	r22, Y+43	; 0x2b
     b64:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <MDIO_VoidSetPortValue>
	/*En_seq*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	62 e0       	ldi	r22, 0x02	; 2
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e8       	ldi	r26, 0x80	; 128
     b78:	bf e3       	ldi	r27, 0x3F	; 63
     b7a:	8f a3       	std	Y+39, r24	; 0x27
     b7c:	98 a7       	std	Y+40, r25	; 0x28
     b7e:	a9 a7       	std	Y+41, r26	; 0x29
     b80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6f a1       	ldd	r22, Y+39	; 0x27
     b84:	78 a5       	ldd	r23, Y+40	; 0x28
     b86:	89 a5       	ldd	r24, Y+41	; 0x29
     b88:	9a a5       	ldd	r25, Y+42	; 0x2a
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8b a3       	std	Y+35, r24	; 0x23
     b9c:	9c a3       	std	Y+36, r25	; 0x24
     b9e:	ad a3       	std	Y+37, r26	; 0x25
     ba0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ba2:	6b a1       	ldd	r22, Y+35	; 0x23
     ba4:	7c a1       	ldd	r23, Y+36	; 0x24
     ba6:	8d a1       	ldd	r24, Y+37	; 0x25
     ba8:	9e a1       	ldd	r25, Y+38	; 0x26
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9a a3       	std	Y+34, r25	; 0x22
     bc0:	89 a3       	std	Y+33, r24	; 0x21
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     bc4:	6b a1       	ldd	r22, Y+35	; 0x23
     bc6:	7c a1       	ldd	r23, Y+36	; 0x24
     bc8:	8d a1       	ldd	r24, Y+37	; 0x25
     bca:	9e a1       	ldd	r25, Y+38	; 0x26
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6f a1       	ldd	r22, Y+39	; 0x27
     bde:	78 a5       	ldd	r23, Y+40	; 0x28
     be0:	89 a5       	ldd	r24, Y+41	; 0x29
     be2:	9a a5       	ldd	r25, Y+42	; 0x2a
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9a a3       	std	Y+34, r25	; 0x22
     c02:	89 a3       	std	Y+33, r24	; 0x21
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <HLCD_VoidSendChar+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	98 a3       	std	Y+32, r25	; 0x20
     c0c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c10:	98 a1       	ldd	r25, Y+32	; 0x20
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <HLCD_VoidSendChar+0xdc>
     c16:	98 a3       	std	Y+32, r25	; 0x20
     c18:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	89 a1       	ldd	r24, Y+33	; 0x21
     c1c:	9a a1       	ldd	r25, Y+34	; 0x22
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9a a3       	std	Y+34, r25	; 0x22
     c22:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	89 a1       	ldd	r24, Y+33	; 0x21
     c26:	9a a1       	ldd	r25, Y+34	; 0x22
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <HLCD_VoidSendChar+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6b a1       	ldd	r22, Y+35	; 0x23
     c30:	7c a1       	ldd	r23, Y+36	; 0x24
     c32:	8d a1       	ldd	r24, Y+37	; 0x25
     c34:	9e a1       	ldd	r25, Y+38	; 0x26
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9a a3       	std	Y+34, r25	; 0x22
     c40:	89 a3       	std	Y+33, r24	; 0x21
     c42:	89 a1       	ldd	r24, Y+33	; 0x21
     c44:	9a a1       	ldd	r25, Y+34	; 0x22
     c46:	9e 8f       	std	Y+30, r25	; 0x1e
     c48:	8d 8f       	std	Y+29, r24	; 0x1d
     c4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c4c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <HLCD_VoidSendChar+0x118>
     c52:	9e 8f       	std	Y+30, r25	; 0x1e
     c54:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait 1ms */
	_delay_ms(1);
	/*set High to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,1);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	62 e0       	ldi	r22, 0x02	; 2
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a0 e8       	ldi	r26, 0x80	; 128
     c66:	bf e3       	ldi	r27, 0x3F	; 63
     c68:	89 8f       	std	Y+25, r24	; 0x19
     c6a:	9a 8f       	std	Y+26, r25	; 0x1a
     c6c:	ab 8f       	std	Y+27, r26	; 0x1b
     c6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c70:	69 8d       	ldd	r22, Y+25	; 0x19
     c72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4a ef       	ldi	r20, 0xFA	; 250
     c7e:	54 e4       	ldi	r21, 0x44	; 68
     c80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	8d 8b       	std	Y+21, r24	; 0x15
     c8a:	9e 8b       	std	Y+22, r25	; 0x16
     c8c:	af 8b       	std	Y+23, r26	; 0x17
     c8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c90:	6d 89       	ldd	r22, Y+21	; 0x15
     c92:	7e 89       	ldd	r23, Y+22	; 0x16
     c94:	8f 89       	ldd	r24, Y+23	; 0x17
     c96:	98 8d       	ldd	r25, Y+24	; 0x18
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e8       	ldi	r20, 0x80	; 128
     c9e:	5f e3       	ldi	r21, 0x3F	; 63
     ca0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ca4:	88 23       	and	r24, r24
     ca6:	2c f4       	brge	.+10     	; 0xcb2 <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9c 8b       	std	Y+20, r25	; 0x14
     cae:	8b 8b       	std	Y+19, r24	; 0x13
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     cb2:	6d 89       	ldd	r22, Y+21	; 0x15
     cb4:	7e 89       	ldd	r23, Y+22	; 0x16
     cb6:	8f 89       	ldd	r24, Y+23	; 0x17
     cb8:	98 8d       	ldd	r25, Y+24	; 0x18
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	3f ef       	ldi	r19, 0xFF	; 255
     cbe:	4f e7       	ldi	r20, 0x7F	; 127
     cc0:	57 e4       	ldi	r21, 0x47	; 71
     cc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cc6:	18 16       	cp	r1, r24
     cc8:	4c f5       	brge	.+82     	; 0xd1c <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cca:	69 8d       	ldd	r22, Y+25	; 0x19
     ccc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e2       	ldi	r20, 0x20	; 32
     cd8:	51 e4       	ldi	r21, 0x41	; 65
     cda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9c 8b       	std	Y+20, r25	; 0x14
     cf0:	8b 8b       	std	Y+19, r24	; 0x13
     cf2:	0f c0       	rjmp	.+30     	; 0xd12 <HLCD_VoidSendChar+0x1dc>
     cf4:	88 ec       	ldi	r24, 0xC8	; 200
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9a 8b       	std	Y+18, r25	; 0x12
     cfa:	89 8b       	std	Y+17, r24	; 0x11
     cfc:	89 89       	ldd	r24, Y+17	; 0x11
     cfe:	9a 89       	ldd	r25, Y+18	; 0x12
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <HLCD_VoidSendChar+0x1ca>
     d04:	9a 8b       	std	Y+18, r25	; 0x12
     d06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d08:	8b 89       	ldd	r24, Y+19	; 0x13
     d0a:	9c 89       	ldd	r25, Y+20	; 0x14
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9c 8b       	std	Y+20, r25	; 0x14
     d10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d12:	8b 89       	ldd	r24, Y+19	; 0x13
     d14:	9c 89       	ldd	r25, Y+20	; 0x14
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	69 f7       	brne	.-38     	; 0xcf4 <HLCD_VoidSendChar+0x1be>
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1c:	6d 89       	ldd	r22, Y+21	; 0x15
     d1e:	7e 89       	ldd	r23, Y+22	; 0x16
     d20:	8f 89       	ldd	r24, Y+23	; 0x17
     d22:	98 8d       	ldd	r25, Y+24	; 0x18
     d24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	9c 8b       	std	Y+20, r25	; 0x14
     d2e:	8b 8b       	std	Y+19, r24	; 0x13
     d30:	8b 89       	ldd	r24, Y+19	; 0x13
     d32:	9c 89       	ldd	r25, Y+20	; 0x14
     d34:	98 8b       	std	Y+16, r25	; 0x10
     d36:	8f 87       	std	Y+15, r24	; 0x0f
     d38:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3a:	98 89       	ldd	r25, Y+16	; 0x10
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <HLCD_VoidSendChar+0x206>
     d40:	98 8b       	std	Y+16, r25	; 0x10
     d42:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait 1ms */
	_delay_ms(1);
	/*set low to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	62 e0       	ldi	r22, 0x02	; 2
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e4       	ldi	r27, 0x40	; 64
     d56:	8b 87       	std	Y+11, r24	; 0x0b
     d58:	9c 87       	std	Y+12, r25	; 0x0c
     d5a:	ad 87       	std	Y+13, r26	; 0x0d
     d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a ef       	ldi	r20, 0xFA	; 250
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8f 83       	std	Y+7, r24	; 0x07
     d78:	98 87       	std	Y+8, r25	; 0x08
     d7a:	a9 87       	std	Y+9, r26	; 0x09
     d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <HLCD_VoidSendChar+0x26a>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <HLCD_VoidSendChar+0x2e8>
	else if (__tmp > 65535)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <HLCD_VoidSendChar+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <HLCD_VoidSendChar+0x2ca>
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <HLCD_VoidSendChar+0x2b8>
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <HLCD_VoidSendChar+0x2ac>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <HLCD_VoidSendChar+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <HLCD_VoidSendChar+0x2f4>
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
	/* wait 1ms */
	_delay_ms(2);
}
     e32:	ab 96       	adiw	r28, 0x2b	; 43
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <HLCD_VoidSendCommand>:
void HLCD_VoidSendCommand(u8 Copy_U8Command)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	ab 97       	sbiw	r28, 0x2b	; 43
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set RS=1, to send data*/
	MDIO_VoidSetPinValue(Copy_RSPort,PIN0,0);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
	/*Set Rw=0, to write */
	MDIO_VoidSetPinValue(Copy_RWPort,PIN1,0);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
	/*Portc = data*/
	MDIO_VoidSetPortValue(Copy_DataPort, Copy_U8Command);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	6b a5       	ldd	r22, Y+43	; 0x2b
     e72:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <MDIO_VoidSetPortValue>
	/*En_seq*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e8       	ldi	r26, 0x80	; 128
     e86:	bf e3       	ldi	r27, 0x3F	; 63
     e88:	8f a3       	std	Y+39, r24	; 0x27
     e8a:	98 a7       	std	Y+40, r25	; 0x28
     e8c:	a9 a7       	std	Y+41, r26	; 0x29
     e8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	6f a1       	ldd	r22, Y+39	; 0x27
     e92:	78 a5       	ldd	r23, Y+40	; 0x28
     e94:	89 a5       	ldd	r24, Y+41	; 0x29
     e96:	9a a5       	ldd	r25, Y+42	; 0x2a
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a ef       	ldi	r20, 0xFA	; 250
     e9e:	54 e4       	ldi	r21, 0x44	; 68
     ea0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8b a3       	std	Y+35, r24	; 0x23
     eaa:	9c a3       	std	Y+36, r25	; 0x24
     eac:	ad a3       	std	Y+37, r26	; 0x25
     eae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eb0:	6b a1       	ldd	r22, Y+35	; 0x23
     eb2:	7c a1       	ldd	r23, Y+36	; 0x24
     eb4:	8d a1       	ldd	r24, Y+37	; 0x25
     eb6:	9e a1       	ldd	r25, Y+38	; 0x26
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	2c f4       	brge	.+10     	; 0xed2 <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9a a3       	std	Y+34, r25	; 0x22
     ece:	89 a3       	std	Y+33, r24	; 0x21
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
     ed2:	6b a1       	ldd	r22, Y+35	; 0x23
     ed4:	7c a1       	ldd	r23, Y+36	; 0x24
     ed6:	8d a1       	ldd	r24, Y+37	; 0x25
     ed8:	9e a1       	ldd	r25, Y+38	; 0x26
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	3f ef       	ldi	r19, 0xFF	; 255
     ede:	4f e7       	ldi	r20, 0x7F	; 127
     ee0:	57 e4       	ldi	r21, 0x47	; 71
     ee2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	4c f5       	brge	.+82     	; 0xf3c <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eea:	6f a1       	ldd	r22, Y+39	; 0x27
     eec:	78 a5       	ldd	r23, Y+40	; 0x28
     eee:	89 a5       	ldd	r24, Y+41	; 0x29
     ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9a a3       	std	Y+34, r25	; 0x22
     f10:	89 a3       	std	Y+33, r24	; 0x21
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <HLCD_VoidSendCommand+0xee>
     f14:	88 ec       	ldi	r24, 0xC8	; 200
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	98 a3       	std	Y+32, r25	; 0x20
     f1a:	8f 8f       	std	Y+31, r24	; 0x1f
     f1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f1e:	98 a1       	ldd	r25, Y+32	; 0x20
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <HLCD_VoidSendCommand+0xdc>
     f24:	98 a3       	std	Y+32, r25	; 0x20
     f26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	89 a1       	ldd	r24, Y+33	; 0x21
     f2a:	9a a1       	ldd	r25, Y+34	; 0x22
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9a a3       	std	Y+34, r25	; 0x22
     f30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	89 a1       	ldd	r24, Y+33	; 0x21
     f34:	9a a1       	ldd	r25, Y+34	; 0x22
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	69 f7       	brne	.-38     	; 0xf14 <HLCD_VoidSendCommand+0xd0>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	6b a1       	ldd	r22, Y+35	; 0x23
     f3e:	7c a1       	ldd	r23, Y+36	; 0x24
     f40:	8d a1       	ldd	r24, Y+37	; 0x25
     f42:	9e a1       	ldd	r25, Y+38	; 0x26
     f44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9a a3       	std	Y+34, r25	; 0x22
     f4e:	89 a3       	std	Y+33, r24	; 0x21
     f50:	89 a1       	ldd	r24, Y+33	; 0x21
     f52:	9a a1       	ldd	r25, Y+34	; 0x22
     f54:	9e 8f       	std	Y+30, r25	; 0x1e
     f56:	8d 8f       	std	Y+29, r24	; 0x1d
     f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <HLCD_VoidSendCommand+0x118>
     f60:	9e 8f       	std	Y+30, r25	; 0x1e
     f62:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait 1ms */
	_delay_ms(1);
	/*set High to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,1);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	62 e0       	ldi	r22, 0x02	; 2
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e8       	ldi	r26, 0x80	; 128
     f74:	bf e3       	ldi	r27, 0x3F	; 63
     f76:	89 8f       	std	Y+25, r24	; 0x19
     f78:	9a 8f       	std	Y+26, r25	; 0x1a
     f7a:	ab 8f       	std	Y+27, r26	; 0x1b
     f7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	69 8d       	ldd	r22, Y+25	; 0x19
     f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a ef       	ldi	r20, 0xFA	; 250
     f8c:	54 e4       	ldi	r21, 0x44	; 68
     f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	8d 8b       	std	Y+21, r24	; 0x15
     f98:	9e 8b       	std	Y+22, r25	; 0x16
     f9a:	af 8b       	std	Y+23, r26	; 0x17
     f9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9c 8b       	std	Y+20, r25	; 0x14
     fbc:	8b 8b       	std	Y+19, r24	; 0x13
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
     fc0:	6d 89       	ldd	r22, Y+21	; 0x15
     fc2:	7e 89       	ldd	r23, Y+22	; 0x16
     fc4:	8f 89       	ldd	r24, Y+23	; 0x17
     fc6:	98 8d       	ldd	r25, Y+24	; 0x18
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	4c f5       	brge	.+82     	; 0x102a <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	69 8d       	ldd	r22, Y+25	; 0x19
     fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9c 8b       	std	Y+20, r25	; 0x14
     ffe:	8b 8b       	std	Y+19, r24	; 0x13
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <HLCD_VoidSendCommand+0x1dc>
    1002:	88 ec       	ldi	r24, 0xC8	; 200
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9a 8b       	std	Y+18, r25	; 0x12
    1008:	89 8b       	std	Y+17, r24	; 0x11
    100a:	89 89       	ldd	r24, Y+17	; 0x11
    100c:	9a 89       	ldd	r25, Y+18	; 0x12
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <HLCD_VoidSendCommand+0x1ca>
    1012:	9a 8b       	std	Y+18, r25	; 0x12
    1014:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	8b 89       	ldd	r24, Y+19	; 0x13
    1018:	9c 89       	ldd	r25, Y+20	; 0x14
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	8b 89       	ldd	r24, Y+19	; 0x13
    1022:	9c 89       	ldd	r25, Y+20	; 0x14
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	69 f7       	brne	.-38     	; 0x1002 <HLCD_VoidSendCommand+0x1be>
    1028:	14 c0       	rjmp	.+40     	; 0x1052 <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102a:	6d 89       	ldd	r22, Y+21	; 0x15
    102c:	7e 89       	ldd	r23, Y+22	; 0x16
    102e:	8f 89       	ldd	r24, Y+23	; 0x17
    1030:	98 8d       	ldd	r25, Y+24	; 0x18
    1032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	8b 89       	ldd	r24, Y+19	; 0x13
    1040:	9c 89       	ldd	r25, Y+20	; 0x14
    1042:	98 8b       	std	Y+16, r25	; 0x10
    1044:	8f 87       	std	Y+15, r24	; 0x0f
    1046:	8f 85       	ldd	r24, Y+15	; 0x0f
    1048:	98 89       	ldd	r25, Y+16	; 0x10
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <HLCD_VoidSendCommand+0x206>
    104e:	98 8b       	std	Y+16, r25	; 0x10
    1050:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait 1ms */
	_delay_ms(1);
	/*set low to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <MDIO_VoidSetPinValue>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	b0 e4       	ldi	r27, 0x40	; 64
    1064:	8b 87       	std	Y+11, r24	; 0x0b
    1066:	9c 87       	std	Y+12, r25	; 0x0c
    1068:	ad 87       	std	Y+13, r26	; 0x0d
    106a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106c:	6b 85       	ldd	r22, Y+11	; 0x0b
    106e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	4a ef       	ldi	r20, 0xFA	; 250
    107a:	54 e4       	ldi	r21, 0x44	; 68
    107c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8f 83       	std	Y+7, r24	; 0x07
    1086:	98 87       	std	Y+8, r25	; 0x08
    1088:	a9 87       	std	Y+9, r26	; 0x09
    108a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <HLCD_VoidSendCommand+0x26a>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	8d 83       	std	Y+5, r24	; 0x05
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <HLCD_VoidSendCommand+0x2e8>
	else if (__tmp > 65535)
    10ae:	6f 81       	ldd	r22, Y+7	; 0x07
    10b0:	78 85       	ldd	r23, Y+8	; 0x08
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <HLCD_VoidSendCommand+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    10cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e2       	ldi	r20, 0x20	; 32
    10d4:	51 e4       	ldi	r21, 0x41	; 65
    10d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <HLCD_VoidSendCommand+0x2ca>
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 83       	std	Y+4, r25	; 0x04
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <HLCD_VoidSendCommand+0x2b8>
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	69 f7       	brne	.-38     	; 0x10f0 <HLCD_VoidSendCommand+0x2ac>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <HLCD_VoidSendCommand+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	9a 83       	std	Y+2, r25	; 0x02
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <HLCD_VoidSendCommand+0x2f4>
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
	/* wait 1ms */
	_delay_ms(2);
}
    1140:	ab 96       	adiw	r28, 0x2b	; 43
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <HLCD_VoidInit>:
void HLCD_VoidInit(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	e8 97       	sbiw	r28, 0x38	; 56
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
	/*power on*/
	MDIO_VoidSetPortDirection(Copy_DataPort,0b11111111);
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	6f ef       	ldi	r22, 0xFF	; 255
    116a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(Copy_RSPort,PIN0,1);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	0e 94 25 0c 	call	0x184a	; 0x184a <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(Copy_RWPort,PIN1,1);
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	61 e0       	ldi	r22, 0x01	; 1
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	0e 94 25 0c 	call	0x184a	; 0x184a <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(Copy_EnPort,PIN2,1);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	62 e0       	ldi	r22, 0x02	; 2
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 25 0c 	call	0x184a	; 0x184a <MDIO_VoidSetPinDirection>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a0 e2       	ldi	r26, 0x20	; 32
    1192:	b2 e4       	ldi	r27, 0x42	; 66
    1194:	8d ab       	std	Y+53, r24	; 0x35
    1196:	9e ab       	std	Y+54, r25	; 0x36
    1198:	af ab       	std	Y+55, r26	; 0x37
    119a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119c:	6d a9       	ldd	r22, Y+53	; 0x35
    119e:	7e a9       	ldd	r23, Y+54	; 0x36
    11a0:	8f a9       	ldd	r24, Y+55	; 0x37
    11a2:	98 ad       	ldd	r25, Y+56	; 0x38
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a ef       	ldi	r20, 0xFA	; 250
    11aa:	54 e4       	ldi	r21, 0x44	; 68
    11ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	89 ab       	std	Y+49, r24	; 0x31
    11b6:	9a ab       	std	Y+50, r25	; 0x32
    11b8:	ab ab       	std	Y+51, r26	; 0x33
    11ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	2c f4       	brge	.+10     	; 0x11de <HLCD_VoidInit+0x8c>
		__ticks = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	98 ab       	std	Y+48, r25	; 0x30
    11da:	8f a7       	std	Y+47, r24	; 0x2f
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <HLCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    11de:	69 a9       	ldd	r22, Y+49	; 0x31
    11e0:	7a a9       	ldd	r23, Y+50	; 0x32
    11e2:	8b a9       	ldd	r24, Y+51	; 0x33
    11e4:	9c a9       	ldd	r25, Y+52	; 0x34
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	4c f5       	brge	.+82     	; 0x1248 <HLCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f6:	6d a9       	ldd	r22, Y+53	; 0x35
    11f8:	7e a9       	ldd	r23, Y+54	; 0x36
    11fa:	8f a9       	ldd	r24, Y+55	; 0x37
    11fc:	98 ad       	ldd	r25, Y+56	; 0x38
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	98 ab       	std	Y+48, r25	; 0x30
    121c:	8f a7       	std	Y+47, r24	; 0x2f
    121e:	0f c0       	rjmp	.+30     	; 0x123e <HLCD_VoidInit+0xec>
    1220:	88 ec       	ldi	r24, 0xC8	; 200
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e a7       	std	Y+46, r25	; 0x2e
    1226:	8d a7       	std	Y+45, r24	; 0x2d
    1228:	8d a5       	ldd	r24, Y+45	; 0x2d
    122a:	9e a5       	ldd	r25, Y+46	; 0x2e
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <HLCD_VoidInit+0xda>
    1230:	9e a7       	std	Y+46, r25	; 0x2e
    1232:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	8f a5       	ldd	r24, Y+47	; 0x2f
    1236:	98 a9       	ldd	r25, Y+48	; 0x30
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	98 ab       	std	Y+48, r25	; 0x30
    123c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1240:	98 a9       	ldd	r25, Y+48	; 0x30
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <HLCD_VoidInit+0xce>
    1246:	14 c0       	rjmp	.+40     	; 0x1270 <HLCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	69 a9       	ldd	r22, Y+49	; 0x31
    124a:	7a a9       	ldd	r23, Y+50	; 0x32
    124c:	8b a9       	ldd	r24, Y+51	; 0x33
    124e:	9c a9       	ldd	r25, Y+52	; 0x34
    1250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	98 ab       	std	Y+48, r25	; 0x30
    125a:	8f a7       	std	Y+47, r24	; 0x2f
    125c:	8f a5       	ldd	r24, Y+47	; 0x2f
    125e:	98 a9       	ldd	r25, Y+48	; 0x30
    1260:	9c a7       	std	Y+44, r25	; 0x2c
    1262:	8b a7       	std	Y+43, r24	; 0x2b
    1264:	8b a5       	ldd	r24, Y+43	; 0x2b
    1266:	9c a5       	ldd	r25, Y+44	; 0x2c
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <HLCD_VoidInit+0x116>
    126c:	9c a7       	std	Y+44, r25	; 0x2c
    126e:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait 40ms*/
	_delay_ms(40);
	
	/*Function set 8bit mode ... 2 line mode ... 5*8 mode */
	
	HLCD_VoidSendCommand(0b00111000);
    1270:	88 e3       	ldi	r24, 0x38	; 56
    1272:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8f a3       	std	Y+39, r24	; 0x27
    1280:	98 a7       	std	Y+40, r25	; 0x28
    1282:	a9 a7       	std	Y+41, r26	; 0x29
    1284:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1286:	6f a1       	ldd	r22, Y+39	; 0x27
    1288:	78 a5       	ldd	r23, Y+40	; 0x28
    128a:	89 a5       	ldd	r24, Y+41	; 0x29
    128c:	9a a5       	ldd	r25, Y+42	; 0x2a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a ef       	ldi	r20, 0xFA	; 250
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8b a3       	std	Y+35, r24	; 0x23
    12a0:	9c a3       	std	Y+36, r25	; 0x24
    12a2:	ad a3       	std	Y+37, r26	; 0x25
    12a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12a6:	6b a1       	ldd	r22, Y+35	; 0x23
    12a8:	7c a1       	ldd	r23, Y+36	; 0x24
    12aa:	8d a1       	ldd	r24, Y+37	; 0x25
    12ac:	9e a1       	ldd	r25, Y+38	; 0x26
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <HLCD_VoidInit+0x176>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9a a3       	std	Y+34, r25	; 0x22
    12c4:	89 a3       	std	Y+33, r24	; 0x21
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <HLCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    12c8:	6b a1       	ldd	r22, Y+35	; 0x23
    12ca:	7c a1       	ldd	r23, Y+36	; 0x24
    12cc:	8d a1       	ldd	r24, Y+37	; 0x25
    12ce:	9e a1       	ldd	r25, Y+38	; 0x26
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	4c f5       	brge	.+82     	; 0x1332 <HLCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e0:	6f a1       	ldd	r22, Y+39	; 0x27
    12e2:	78 a5       	ldd	r23, Y+40	; 0x28
    12e4:	89 a5       	ldd	r24, Y+41	; 0x29
    12e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9a a3       	std	Y+34, r25	; 0x22
    1306:	89 a3       	std	Y+33, r24	; 0x21
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <HLCD_VoidInit+0x1d6>
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	98 a3       	std	Y+32, r25	; 0x20
    1310:	8f 8f       	std	Y+31, r24	; 0x1f
    1312:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1314:	98 a1       	ldd	r25, Y+32	; 0x20
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <HLCD_VoidInit+0x1c4>
    131a:	98 a3       	std	Y+32, r25	; 0x20
    131c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	89 a1       	ldd	r24, Y+33	; 0x21
    1320:	9a a1       	ldd	r25, Y+34	; 0x22
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9a a3       	std	Y+34, r25	; 0x22
    1326:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	89 a1       	ldd	r24, Y+33	; 0x21
    132a:	9a a1       	ldd	r25, Y+34	; 0x22
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <HLCD_VoidInit+0x1b8>
    1330:	14 c0       	rjmp	.+40     	; 0x135a <HLCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	6b a1       	ldd	r22, Y+35	; 0x23
    1334:	7c a1       	ldd	r23, Y+36	; 0x24
    1336:	8d a1       	ldd	r24, Y+37	; 0x25
    1338:	9e a1       	ldd	r25, Y+38	; 0x26
    133a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	9e 8f       	std	Y+30, r25	; 0x1e
    134c:	8d 8f       	std	Y+29, r24	; 0x1d
    134e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1350:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <HLCD_VoidInit+0x200>
    1356:	9e 8f       	std	Y+30, r25	; 0x1e
    1358:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 1ms*/
 _delay_ms(1);

/*on display..on cursor...on bluting*/

HLCD_VoidSendCommand(0b00001111);
    135a:	8f e0       	ldi	r24, 0x0F	; 15
    135c:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e8       	ldi	r26, 0x80	; 128
    1366:	bf e3       	ldi	r27, 0x3F	; 63
    1368:	89 8f       	std	Y+25, r24	; 0x19
    136a:	9a 8f       	std	Y+26, r25	; 0x1a
    136c:	ab 8f       	std	Y+27, r26	; 0x1b
    136e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1370:	69 8d       	ldd	r22, Y+25	; 0x19
    1372:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1374:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1376:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4a ef       	ldi	r20, 0xFA	; 250
    137e:	54 e4       	ldi	r21, 0x44	; 68
    1380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8d 8b       	std	Y+21, r24	; 0x15
    138a:	9e 8b       	std	Y+22, r25	; 0x16
    138c:	af 8b       	std	Y+23, r26	; 0x17
    138e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e8       	ldi	r20, 0x80	; 128
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13a4:	88 23       	and	r24, r24
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <HLCD_VoidInit+0x260>
		__ticks = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c 8b       	std	Y+20, r25	; 0x14
    13ae:	8b 8b       	std	Y+19, r24	; 0x13
    13b0:	3f c0       	rjmp	.+126    	; 0x1430 <HLCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    13b2:	6d 89       	ldd	r22, Y+21	; 0x15
    13b4:	7e 89       	ldd	r23, Y+22	; 0x16
    13b6:	8f 89       	ldd	r24, Y+23	; 0x17
    13b8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
    13be:	4f e7       	ldi	r20, 0x7F	; 127
    13c0:	57 e4       	ldi	r21, 0x47	; 71
    13c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13c6:	18 16       	cp	r1, r24
    13c8:	4c f5       	brge	.+82     	; 0x141c <HLCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ca:	69 8d       	ldd	r22, Y+25	; 0x19
    13cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9c 8b       	std	Y+20, r25	; 0x14
    13f0:	8b 8b       	std	Y+19, r24	; 0x13
    13f2:	0f c0       	rjmp	.+30     	; 0x1412 <HLCD_VoidInit+0x2c0>
    13f4:	88 ec       	ldi	r24, 0xC8	; 200
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9a 8b       	std	Y+18, r25	; 0x12
    13fa:	89 8b       	std	Y+17, r24	; 0x11
    13fc:	89 89       	ldd	r24, Y+17	; 0x11
    13fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <HLCD_VoidInit+0x2ae>
    1404:	9a 8b       	std	Y+18, r25	; 0x12
    1406:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	8b 89       	ldd	r24, Y+19	; 0x13
    1414:	9c 89       	ldd	r25, Y+20	; 0x14
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	69 f7       	brne	.-38     	; 0x13f4 <HLCD_VoidInit+0x2a2>
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <HLCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	6d 89       	ldd	r22, Y+21	; 0x15
    141e:	7e 89       	ldd	r23, Y+22	; 0x16
    1420:	8f 89       	ldd	r24, Y+23	; 0x17
    1422:	98 8d       	ldd	r25, Y+24	; 0x18
    1424:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9c 8b       	std	Y+20, r25	; 0x14
    142e:	8b 8b       	std	Y+19, r24	; 0x13
    1430:	8b 89       	ldd	r24, Y+19	; 0x13
    1432:	9c 89       	ldd	r25, Y+20	; 0x14
    1434:	98 8b       	std	Y+16, r25	; 0x10
    1436:	8f 87       	std	Y+15, r24	; 0x0f
    1438:	8f 85       	ldd	r24, Y+15	; 0x0f
    143a:	98 89       	ldd	r25, Y+16	; 0x10
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <HLCD_VoidInit+0x2ea>
    1440:	98 8b       	std	Y+16, r25	; 0x10
    1442:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1);

/*display clear*/

HLCD_VoidSendCommand(0b00000001);
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e0       	ldi	r26, 0x00	; 0
    1450:	b0 e4       	ldi	r27, 0x40	; 64
    1452:	8b 87       	std	Y+11, r24	; 0x0b
    1454:	9c 87       	std	Y+12, r25	; 0x0c
    1456:	ad 87       	std	Y+13, r26	; 0x0d
    1458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	6b 85       	ldd	r22, Y+11	; 0x0b
    145c:	7c 85       	ldd	r23, Y+12	; 0x0c
    145e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1460:	9e 85       	ldd	r25, Y+14	; 0x0e
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	4a ef       	ldi	r20, 0xFA	; 250
    1468:	54 e4       	ldi	r21, 0x44	; 68
    146a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8f 83       	std	Y+7, r24	; 0x07
    1474:	98 87       	std	Y+8, r25	; 0x08
    1476:	a9 87       	std	Y+9, r26	; 0x09
    1478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <HLCD_VoidInit+0x34a>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	3f c0       	rjmp	.+126    	; 0x151a <HLCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	4c f5       	brge	.+82     	; 0x1506 <HLCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <HLCD_VoidInit+0x3aa>
    14de:	88 ec       	ldi	r24, 0xC8	; 200
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <HLCD_VoidInit+0x398>
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f7       	brne	.-38     	; 0x14de <HLCD_VoidInit+0x38c>
    1504:	14 c0       	rjmp	.+40     	; 0x152e <HLCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <HLCD_VoidInit+0x3d4>
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
	
	/*delay more than 1.53ms*/
	
	_delay_ms(2);
	
}
    152e:	e8 96       	adiw	r28, 0x38	; 56
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <HLCD_VoidStringChar>:
void HLCD_VoidStringChar (char* str)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	00 d0       	rcall	.+0      	; 0x1546 <HLCD_VoidStringChar+0x6>
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	9b 83       	std	Y+3, r25	; 0x03
    154e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1550:	19 82       	std	Y+1, r1	; 0x01
    1552:	0e c0       	rjmp	.+28     	; 0x1570 <HLCD_VoidStringChar+0x30>
	
	while (str[i]!=('\0'))
	{
		HLCD_VoidSendChar(str[i]);
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	9b 81       	ldd	r25, Y+3	; 0x03
    155e:	fc 01       	movw	r30, r24
    1560:	e2 0f       	add	r30, r18
    1562:	f3 1f       	adc	r31, r19
    1564:	80 81       	ld	r24, Z
    1566:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
		i++;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	89 83       	std	Y+1, r24	; 0x01
}
void HLCD_VoidStringChar (char* str)
{
	u8 i=0;
	
	while (str[i]!=('\0'))
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	fc 01       	movw	r30, r24
    157c:	e2 0f       	add	r30, r18
    157e:	f3 1f       	adc	r31, r19
    1580:	80 81       	ld	r24, Z
    1582:	88 23       	and	r24, r24
    1584:	39 f7       	brne	.-50     	; 0x1554 <HLCD_VoidStringChar+0x14>
	{
		HLCD_VoidSendChar(str[i]);
		i++;
	}
	
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <HLCD_VoidSetPostion>:
void HLCD_VoidSetPostion(u8 Copy_U8Row,u8 Copy_U8Col)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <HLCD_VoidSetPostion+0x6>
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
	
	if (Copy_U8Row == 0)
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	88 23       	and	r24, r24
    15a4:	29 f4       	brne	.+10     	; 0x15b0 <HLCD_VoidSetPostion+0x1e>
	{
		HLCD_VoidSendCommand(Copy_U8Col+128);
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	80 58       	subi	r24, 0x80	; 128
    15aa:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
    15ae:	07 c0       	rjmp	.+14     	; 0x15be <HLCD_VoidSetPostion+0x2c>
	}
	else if (Copy_U8Row == 1)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	21 f4       	brne	.+8      	; 0x15be <HLCD_VoidSetPostion+0x2c>
	{
		HLCD_VoidSendCommand(Copy_U8Col+128+64);
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 54       	subi	r24, 0x40	; 64
    15ba:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
	}
	
	
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <HLCD_SendNumber>:
void HLCD_SendNumber(u32 num)
{
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2c 97       	sbiw	r28, 0x0c	; 12
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	69 87       	std	Y+9, r22	; 0x09
    15e6:	7a 87       	std	Y+10, r23	; 0x0a
    15e8:	8b 87       	std	Y+11, r24	; 0x0b
    15ea:	9c 87       	std	Y+12, r25	; 0x0c
	if (0==num)
    15ec:	89 85       	ldd	r24, Y+9	; 0x09
    15ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f0:	ab 85       	ldd	r26, Y+11	; 0x0b
    15f2:	bc 85       	ldd	r27, Y+12	; 0x0c
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	a1 05       	cpc	r26, r1
    15f8:	b1 05       	cpc	r27, r1
    15fa:	21 f4       	brne	.+8      	; 0x1604 <HLCD_SendNumber+0x3c>
	{
		HLCD_VoidSendChar(0+48);
    15fc:	80 e3       	ldi	r24, 0x30	; 48
    15fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
    1602:	79 c0       	rjmp	.+242    	; 0x16f6 <HLCD_SendNumber+0x12e>
	}
	else
	{
	u32 Loc_U32Rev=1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e0       	ldi	r26, 0x00	; 0
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	af 83       	std	Y+7, r26	; 0x07
    1612:	b8 87       	std	Y+8, r27	; 0x08
    1614:	36 c0       	rjmp	.+108    	; 0x1682 <HLCD_SendNumber+0xba>
	while (num>0)
	{
		Loc_U32Rev=(Loc_U32Rev*10)+num%10;
    1616:	8d 81       	ldd	r24, Y+5	; 0x05
    1618:	9e 81       	ldd	r25, Y+6	; 0x06
    161a:	af 81       	ldd	r26, Y+7	; 0x07
    161c:	b8 85       	ldd	r27, Y+8	; 0x08
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__mulsi3>
    162e:	7b 01       	movw	r14, r22
    1630:	8c 01       	movw	r16, r24
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	ab 85       	ldd	r26, Y+11	; 0x0b
    1638:	bc 85       	ldd	r27, Y+12	; 0x0c
    163a:	2a e0       	ldi	r18, 0x0A	; 10
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	0e 94 90 10 	call	0x2120	; 0x2120 <__udivmodsi4>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	8e 0d       	add	r24, r14
    1650:	9f 1d       	adc	r25, r15
    1652:	a0 1f       	adc	r26, r16
    1654:	b1 1f       	adc	r27, r17
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	af 83       	std	Y+7, r26	; 0x07
    165c:	b8 87       	std	Y+8, r27	; 0x08
		num/=10;
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	ab 85       	ldd	r26, Y+11	; 0x0b
    1664:	bc 85       	ldd	r27, Y+12	; 0x0c
    1666:	2a e0       	ldi	r18, 0x0A	; 10
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 90 10 	call	0x2120	; 0x2120 <__udivmodsi4>
    1676:	da 01       	movw	r26, r20
    1678:	c9 01       	movw	r24, r18
    167a:	89 87       	std	Y+9, r24	; 0x09
    167c:	9a 87       	std	Y+10, r25	; 0x0a
    167e:	ab 87       	std	Y+11, r26	; 0x0b
    1680:	bc 87       	std	Y+12, r27	; 0x0c
		HLCD_VoidSendChar(0+48);
	}
	else
	{
	u32 Loc_U32Rev=1;
	while (num>0)
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	ab 85       	ldd	r26, Y+11	; 0x0b
    1688:	bc 85       	ldd	r27, Y+12	; 0x0c
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	a1 05       	cpc	r26, r1
    168e:	b1 05       	cpc	r27, r1
    1690:	11 f6       	brne	.-124    	; 0x1616 <HLCD_SendNumber+0x4e>
    1692:	28 c0       	rjmp	.+80     	; 0x16e4 <HLCD_SendNumber+0x11c>
		Loc_U32Rev=(Loc_U32Rev*10)+num%10;
		num/=10;
	}
	while(Loc_U32Rev>1)
	{
	   u32 n=Loc_U32Rev%10;
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	af 81       	ldd	r26, Y+7	; 0x07
    169a:	b8 85       	ldd	r27, Y+8	; 0x08
    169c:	2a e0       	ldi	r18, 0x0A	; 10
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0e 94 90 10 	call	0x2120	; 0x2120 <__udivmodsi4>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	ab 83       	std	Y+3, r26	; 0x03
    16b6:	bc 83       	std	Y+4, r27	; 0x04
	   HLCD_VoidSendChar(n+48);
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	80 5d       	subi	r24, 0xD0	; 208
    16bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	   Loc_U32Rev=Loc_U32Rev/10;
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	af 81       	ldd	r26, Y+7	; 0x07
    16c6:	b8 85       	ldd	r27, Y+8	; 0x08
    16c8:	2a e0       	ldi	r18, 0x0A	; 10
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 90 10 	call	0x2120	; 0x2120 <__udivmodsi4>
    16d8:	da 01       	movw	r26, r20
    16da:	c9 01       	movw	r24, r18
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	af 83       	std	Y+7, r26	; 0x07
    16e2:	b8 87       	std	Y+8, r27	; 0x08
	while (num>0)
	{
		Loc_U32Rev=(Loc_U32Rev*10)+num%10;
		num/=10;
	}
	while(Loc_U32Rev>1)
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	af 81       	ldd	r26, Y+7	; 0x07
    16ea:	b8 85       	ldd	r27, Y+8	; 0x08
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	91 05       	cpc	r25, r1
    16f0:	a1 05       	cpc	r26, r1
    16f2:	b1 05       	cpc	r27, r1
    16f4:	78 f6       	brcc	.-98     	; 0x1694 <HLCD_SendNumber+0xcc>
	   u32 n=Loc_U32Rev%10;
	   HLCD_VoidSendChar(n+48);
	   Loc_U32Rev=Loc_U32Rev/10;
	}
	}
}
    16f6:	2c 96       	adiw	r28, 0x0c	; 12
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	08 95       	ret

00001710 <HLCD_DrawChar>:
void HLCD_DrawChar(void)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	
	HLCD_VoidSendCommand(0b01000000);
    1718:	80 e4       	ldi	r24, 0x40	; 64
    171a:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00110);
    171e:	86 e0       	ldi	r24, 0x06	; 6
    1720:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00110);
    172a:	86 e0       	ldi	r24, 0x06	; 6
    172c:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1730:	8e e0       	ldi	r24, 0x0E	; 14
    1732:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00000);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    173c:	84 e0       	ldi	r24, 0x04	; 4
    173e:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+1);
    174e:	81 e8       	ldi	r24, 0x81	; 129
    1750:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00000000);
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0e 94 9b 05 	call	0xb36	; 0xb36 <HLCD_VoidSendChar>
}
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <MADC_voidInit>:
 #include "MADC_Interface.h"
 
 
 
 void MADC_voidInit(void)
 {
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
	 /*AVCC as reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
    1768:	a7 e2       	ldi	r26, 0x27	; 39
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e7 e2       	ldi	r30, 0x27	; 39
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	80 64       	ori	r24, 0x40	; 64
    1774:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    1776:	a7 e2       	ldi	r26, 0x27	; 39
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e2       	ldi	r30, 0x27	; 39
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8f 77       	andi	r24, 0x7F	; 127
    1782:	8c 93       	st	X, r24

	/*Activate Right adjust result*/
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1784:	a7 e2       	ldi	r26, 0x27	; 39
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e7 e2       	ldi	r30, 0x27	; 39
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8f 7d       	andi	r24, 0xDF	; 223
    1790:	8c 93       	st	X, r24

   /* disable interupt */
	CLR_BIT(ADMUX,ADCSRA_ADIE);
    1792:	a7 e2       	ldi	r26, 0x27	; 39
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e7 e2       	ldi	r30, 0x27	; 39
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	87 7f       	andi	r24, 0xF7	; 247
    179e:	8c 93       	st	X, r24

	/*Set Prescaler to divide by 128*/
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    17a0:	a6 e2       	ldi	r26, 0x26	; 38
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e6 e2       	ldi	r30, 0x26	; 38
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	84 60       	ori	r24, 0x04	; 4
    17ac:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
    17ae:	a6 e2       	ldi	r26, 0x26	; 38
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e6 e2       	ldi	r30, 0x26	; 38
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	82 60       	ori	r24, 0x02	; 2
    17ba:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    17bc:	a6 e2       	ldi	r26, 0x26	; 38
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e6 e2       	ldi	r30, 0x26	; 38
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	81 60       	ori	r24, 0x01	; 1
    17c8:	8c 93       	st	X, r24

	/*Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    17ca:	a6 e2       	ldi	r26, 0x26	; 38
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e6 e2       	ldi	r30, 0x26	; 38
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 68       	ori	r24, 0x80	; 128
    17d6:	8c 93       	st	X, r24
 }
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <MADC_ReadData>:

 u16 MADC_ReadData (u8 Copy_U8Channel)
 {
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	89 83       	std	Y+1, r24	; 0x01
	 /*Clear the MUX bits in ADMUX register*/
		ADMUX&=0b11100000;
    17ea:	a7 e2       	ldi	r26, 0x27	; 39
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e7 e2       	ldi	r30, 0x27	; 39
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 7e       	andi	r24, 0xE0	; 224
    17f6:	8c 93       	st	X, r24

	/*Set the required channel into the MUX bits*/
		ADMUX|=Copy_U8Channel;
    17f8:	a7 e2       	ldi	r26, 0x27	; 39
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e7 e2       	ldi	r30, 0x27	; 39
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	90 81       	ld	r25, Z
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	89 2b       	or	r24, r25
    1806:	8c 93       	st	X, r24
	
	/*Start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    1808:	a6 e2       	ldi	r26, 0x26	; 38
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e6 e2       	ldi	r30, 0x26	; 38
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	80 64       	ori	r24, 0x40	; 64
    1814:	8c 93       	st	X, r24
    
	/*Polling (busy waiting) until the conversion complete flag is set*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    1816:	e6 e2       	ldi	r30, 0x26	; 38
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	82 95       	swap	r24
    181e:	8f 70       	andi	r24, 0x0F	; 15
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	90 70       	andi	r25, 0x00	; 0
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	a9 f3       	breq	.-22     	; 0x1816 <MADC_ReadData+0x38>
	
	/*clear the conversion complete flag*/
		SET_BIT(ADCSRA,ADCSRA_ADIF);
    182c:	a6 e2       	ldi	r26, 0x26	; 38
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e6 e2       	ldi	r30, 0x26	; 38
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 61       	ori	r24, 0x10	; 16
    1838:	8c 93       	st	X, r24

	/*Return the reading*/
	return ADC_data;
    183a:	e4 e2       	ldi	r30, 0x24	; 36
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
 }
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <MDIO_VoidSetPinDirection>:
#include "MDIO_Private.h"
#include "MDIO_Interface.h"


void MDIO_VoidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Dir)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	27 97       	sbiw	r28, 0x07	; 7
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	6a 83       	std	Y+2, r22	; 0x02
    1862:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==Copy_U8Dir)
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	09 f0       	breq	.+2      	; 0x186c <MDIO_VoidSetPinDirection+0x22>
    186a:	6f c0       	rjmp	.+222    	; 0x194a <MDIO_VoidSetPinDirection+0x100>
	{
		switch (Copy_U8Port)
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3f 83       	std	Y+7, r19	; 0x07
    1874:	2e 83       	std	Y+6, r18	; 0x06
    1876:	8e 81       	ldd	r24, Y+6	; 0x06
    1878:	9f 81       	ldd	r25, Y+7	; 0x07
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	91 05       	cpc	r25, r1
    187e:	49 f1       	breq	.+82     	; 0x18d2 <MDIO_VoidSetPinDirection+0x88>
    1880:	2e 81       	ldd	r18, Y+6	; 0x06
    1882:	3f 81       	ldd	r19, Y+7	; 0x07
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <MDIO_VoidSetPinDirection+0x4a>
    188a:	8e 81       	ldd	r24, Y+6	; 0x06
    188c:	9f 81       	ldd	r25, Y+7	; 0x07
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	61 f0       	breq	.+24     	; 0x18aa <MDIO_VoidSetPinDirection+0x60>
    1892:	d2 c0       	rjmp	.+420    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
    1894:	2e 81       	ldd	r18, Y+6	; 0x06
    1896:	3f 81       	ldd	r19, Y+7	; 0x07
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	71 f1       	breq	.+92     	; 0x18fa <MDIO_VoidSetPinDirection+0xb0>
    189e:	8e 81       	ldd	r24, Y+6	; 0x06
    18a0:	9f 81       	ldd	r25, Y+7	; 0x07
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	e9 f1       	breq	.+122    	; 0x1922 <MDIO_VoidSetPinDirection+0xd8>
    18a8:	c7 c0       	rjmp	.+398    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
		{
			case PORTA: SET_BIT(DDRA_REG,Copy_U8Pin); break;
    18aa:	aa e3       	ldi	r26, 0x3A	; 58
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ea e3       	ldi	r30, 0x3A	; 58
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <MDIO_VoidSetPinDirection+0x7e>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <MDIO_VoidSetPinDirection+0x7a>
    18cc:	84 2b       	or	r24, r20
    18ce:	8c 93       	st	X, r24
    18d0:	b3 c0       	rjmp	.+358    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTB: SET_BIT(DDRB_REG,Copy_U8Pin); break;
    18d2:	a7 e3       	ldi	r26, 0x37	; 55
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e7 e3       	ldi	r30, 0x37	; 55
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <MDIO_VoidSetPinDirection+0xa6>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <MDIO_VoidSetPinDirection+0xa2>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	9f c0       	rjmp	.+318    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTC: SET_BIT(DDRC_REG,Copy_U8Pin); break;
    18fa:	a4 e3       	ldi	r26, 0x34	; 52
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e4 e3       	ldi	r30, 0x34	; 52
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <MDIO_VoidSetPinDirection+0xce>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <MDIO_VoidSetPinDirection+0xca>
    191c:	84 2b       	or	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	8b c0       	rjmp	.+278    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTD: SET_BIT(DDRD_REG,Copy_U8Pin); break;
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <MDIO_VoidSetPinDirection+0xf6>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <MDIO_VoidSetPinDirection+0xf2>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	77 c0       	rjmp	.+238    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			default: /* do nothing */;
		}
		
	}
	else if (0==Copy_U8Dir)
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 23       	and	r24, r24
    194e:	09 f0       	breq	.+2      	; 0x1952 <MDIO_VoidSetPinDirection+0x108>
    1950:	73 c0       	rjmp	.+230    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
	
	{
		switch (Copy_U8Port)
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3d 83       	std	Y+5, r19	; 0x05
    195a:	2c 83       	std	Y+4, r18	; 0x04
    195c:	8c 81       	ldd	r24, Y+4	; 0x04
    195e:	9d 81       	ldd	r25, Y+5	; 0x05
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	59 f1       	breq	.+86     	; 0x19bc <MDIO_VoidSetPinDirection+0x172>
    1966:	2c 81       	ldd	r18, Y+4	; 0x04
    1968:	3d 81       	ldd	r19, Y+5	; 0x05
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	2c f4       	brge	.+10     	; 0x197a <MDIO_VoidSetPinDirection+0x130>
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	69 f0       	breq	.+26     	; 0x1992 <MDIO_VoidSetPinDirection+0x148>
    1978:	5f c0       	rjmp	.+190    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
    197a:	2c 81       	ldd	r18, Y+4	; 0x04
    197c:	3d 81       	ldd	r19, Y+5	; 0x05
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	89 f1       	breq	.+98     	; 0x19e6 <MDIO_VoidSetPinDirection+0x19c>
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	83 30       	cpi	r24, 0x03	; 3
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <MDIO_VoidSetPinDirection+0x146>
    198e:	40 c0       	rjmp	.+128    	; 0x1a10 <MDIO_VoidSetPinDirection+0x1c6>
    1990:	53 c0       	rjmp	.+166    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
		{
			case PORTA: CLR_BIT(DDRA_REG,Copy_U8Pin); break;
    1992:	aa e3       	ldi	r26, 0x3A	; 58
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ea e3       	ldi	r30, 0x3A	; 58
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <MDIO_VoidSetPinDirection+0x166>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <MDIO_VoidSetPinDirection+0x162>
    19b4:	80 95       	com	r24
    19b6:	84 23       	and	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	3e c0       	rjmp	.+124    	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTB: CLR_BIT(DDRB_REG,Copy_U8Pin); break;
    19bc:	a7 e3       	ldi	r26, 0x37	; 55
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e7 e3       	ldi	r30, 0x37	; 55
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <MDIO_VoidSetPinDirection+0x190>
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <MDIO_VoidSetPinDirection+0x18c>
    19de:	80 95       	com	r24
    19e0:	84 23       	and	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	29 c0       	rjmp	.+82     	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTC: CLR_BIT(DDRC_REG,Copy_U8Pin); break;
    19e6:	a4 e3       	ldi	r26, 0x34	; 52
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e4 e3       	ldi	r30, 0x34	; 52
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <MDIO_VoidSetPinDirection+0x1ba>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <MDIO_VoidSetPinDirection+0x1b6>
    1a08:	80 95       	com	r24
    1a0a:	84 23       	and	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTD: CLR_BIT(DDRD_REG,Copy_U8Pin); break;
    1a10:	a2 e3       	ldi	r26, 0x32	; 50
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e2 e3       	ldi	r30, 0x32	; 50
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <MDIO_VoidSetPinDirection+0x1e4>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <MDIO_VoidSetPinDirection+0x1e0>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
	else 
	{
		
		/* Do NOthing*/
	}
}
    1a38:	27 96       	adiw	r28, 0x07	; 7
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <MDIO_VoidSetPinValue>:


void MDIO_VoidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Val)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	27 97       	sbiw	r28, 0x07	; 7
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	6a 83       	std	Y+2, r22	; 0x02
    1a62:	4b 83       	std	Y+3, r20	; 0x03
 if(0==Copy_U8Val)
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	88 23       	and	r24, r24
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <MDIO_VoidSetPinValue+0x22>
    1a6a:	74 c0       	rjmp	.+232    	; 0x1b54 <MDIO_VoidSetPinValue+0x10a>
 {
		switch (Copy_U8Port)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3f 83       	std	Y+7, r19	; 0x07
    1a74:	2e 83       	std	Y+6, r18	; 0x06
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	59 f1       	breq	.+86     	; 0x1ad6 <MDIO_VoidSetPinValue+0x8c>
    1a80:	2e 81       	ldd	r18, Y+6	; 0x06
    1a82:	3f 81       	ldd	r19, Y+7	; 0x07
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <MDIO_VoidSetPinValue+0x4a>
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f0       	breq	.+26     	; 0x1aac <MDIO_VoidSetPinValue+0x62>
    1a92:	d2 c0       	rjmp	.+420    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
    1a94:	2e 81       	ldd	r18, Y+6	; 0x06
    1a96:	3f 81       	ldd	r19, Y+7	; 0x07
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	89 f1       	breq	.+98     	; 0x1b00 <MDIO_VoidSetPinValue+0xb6>
    1a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <MDIO_VoidSetPinValue+0x60>
    1aa8:	40 c0       	rjmp	.+128    	; 0x1b2a <MDIO_VoidSetPinValue+0xe0>
    1aaa:	c6 c0       	rjmp	.+396    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
		{
			case PORTA: CLR_BIT(PORTA_REG,Copy_U8Pin); break;
    1aac:	ab e3       	ldi	r26, 0x3B	; 59
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	eb e3       	ldi	r30, 0x3B	; 59
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <MDIO_VoidSetPinValue+0x80>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <MDIO_VoidSetPinValue+0x7c>
    1ace:	80 95       	com	r24
    1ad0:	84 23       	and	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	b1 c0       	rjmp	.+354    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
			case PORTB: CLR_BIT(PORTB_REG,Copy_U8Pin); break;
    1ad6:	a8 e3       	ldi	r26, 0x38	; 56
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e8 e3       	ldi	r30, 0x38	; 56
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <MDIO_VoidSetPinValue+0xaa>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <MDIO_VoidSetPinValue+0xa6>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	9c c0       	rjmp	.+312    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
			case PORTC: CLR_BIT(PORTC_REG,Copy_U8Pin); break;
    1b00:	a5 e3       	ldi	r26, 0x35	; 53
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e3       	ldi	r30, 0x35	; 53
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <MDIO_VoidSetPinValue+0xd4>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <MDIO_VoidSetPinValue+0xd0>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	87 c0       	rjmp	.+270    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
			case PORTD: CLR_BIT(PORTD_REG,Copy_U8Pin); break;
    1b2a:	a1 e3       	ldi	r26, 0x31	; 49
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e1 e3       	ldi	r30, 0x31	; 49
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <MDIO_VoidSetPinValue+0xfe>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <MDIO_VoidSetPinValue+0xfa>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	72 c0       	rjmp	.+228    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
			default: /* do nothing */;
		}
 }
 else if(1==Copy_U8Val)
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <MDIO_VoidSetPinValue+0x112>
    1b5a:	6e c0       	rjmp	.+220    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
 	{
 		switch(Copy_U8Port)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3d 83       	std	Y+5, r19	; 0x05
    1b64:	2c 83       	std	Y+4, r18	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	49 f1       	breq	.+82     	; 0x1bc2 <MDIO_VoidSetPinValue+0x178>
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <MDIO_VoidSetPinValue+0x13a>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <MDIO_VoidSetPinValue+0x150>
    1b82:	5a c0       	rjmp	.+180    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
    1b84:	2c 81       	ldd	r18, Y+4	; 0x04
    1b86:	3d 81       	ldd	r19, Y+5	; 0x05
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	71 f1       	breq	.+92     	; 0x1bea <MDIO_VoidSetPinValue+0x1a0>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	e9 f1       	breq	.+122    	; 0x1c12 <MDIO_VoidSetPinValue+0x1c8>
    1b98:	4f c0       	rjmp	.+158    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
 		{
 			case PORTA:SET_BIT(PORTA_REG,Copy_U8Pin) ; break;
    1b9a:	ab e3       	ldi	r26, 0x3B	; 59
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <MDIO_VoidSetPinValue+0x16e>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <MDIO_VoidSetPinValue+0x16a>
    1bbc:	84 2b       	or	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	3b c0       	rjmp	.+118    	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
 			case PORTB:SET_BIT(PORTB_REG,Copy_U8Pin) ; break;
    1bc2:	a8 e3       	ldi	r26, 0x38	; 56
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e8 e3       	ldi	r30, 0x38	; 56
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <MDIO_VoidSetPinValue+0x196>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <MDIO_VoidSetPinValue+0x192>
    1be4:	84 2b       	or	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	27 c0       	rjmp	.+78     	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
 			case PORTC:SET_BIT(PORTC_REG,Copy_U8Pin) ; break;
    1bea:	a5 e3       	ldi	r26, 0x35	; 53
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e5 e3       	ldi	r30, 0x35	; 53
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <MDIO_VoidSetPinValue+0x1be>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <MDIO_VoidSetPinValue+0x1ba>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	13 c0       	rjmp	.+38     	; 0x1c38 <MDIO_VoidSetPinValue+0x1ee>
 			case PORTD:SET_BIT(PORTD_REG,Copy_U8Pin) ; break;
    1c12:	a1 e3       	ldi	r26, 0x31	; 49
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e1 e3       	ldi	r30, 0x31	; 49
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <MDIO_VoidSetPinValue+0x1e6>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <MDIO_VoidSetPinValue+0x1e2>
    1c34:	84 2b       	or	r24, r20
    1c36:	8c 93       	st	X, r24
 		/* do nothing */
 	}
		
	
	
}
    1c38:	27 96       	adiw	r28, 0x07	; 7
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <MDIO_u8GetPinValue+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <MDIO_u8GetPinValue+0x8>
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_U8RetValue ;
	switch (Copy_U8Port)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	4c 81       	ldd	r20, Y+4	; 0x04
    1c68:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6a:	41 30       	cpi	r20, 0x01	; 1
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	41 f1       	breq	.+80     	; 0x1cc0 <MDIO_u8GetPinValue+0x76>
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	91 05       	cpc	r25, r1
    1c78:	34 f4       	brge	.+12     	; 0x1c86 <MDIO_u8GetPinValue+0x3c>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	21 15       	cp	r18, r1
    1c80:	31 05       	cpc	r19, r1
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <MDIO_u8GetPinValue+0x52>
    1c84:	52 c0       	rjmp	.+164    	; 0x1d2a <MDIO_u8GetPinValue+0xe0>
    1c86:	4c 81       	ldd	r20, Y+4	; 0x04
    1c88:	5d 81       	ldd	r21, Y+5	; 0x05
    1c8a:	42 30       	cpi	r20, 0x02	; 2
    1c8c:	51 05       	cpc	r21, r1
    1c8e:	51 f1       	breq	.+84     	; 0x1ce4 <MDIO_u8GetPinValue+0x9a>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	83 30       	cpi	r24, 0x03	; 3
    1c96:	91 05       	cpc	r25, r1
    1c98:	b9 f1       	breq	.+110    	; 0x1d08 <MDIO_u8GetPinValue+0xbe>
    1c9a:	47 c0       	rjmp	.+142    	; 0x1d2a <MDIO_u8GetPinValue+0xe0>
	{
		
		case PORTA: LOC_U8RetValue=GET_BIT(PINA_REG,Copy_U8Pin); break;
    1c9c:	e9 e3       	ldi	r30, 0x39	; 57
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a9 01       	movw	r20, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <MDIO_u8GetPinValue+0x6a>
    1cb0:	55 95       	asr	r21
    1cb2:	47 95       	ror	r20
    1cb4:	8a 95       	dec	r24
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <MDIO_u8GetPinValue+0x66>
    1cb8:	ca 01       	movw	r24, r20
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	35 c0       	rjmp	.+106    	; 0x1d2a <MDIO_u8GetPinValue+0xe0>
		case PORTB: LOC_U8RetValue=GET_BIT(PINB_REG,Copy_U8Pin); break;
    1cc0:	e6 e3       	ldi	r30, 0x36	; 54
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a9 01       	movw	r20, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <MDIO_u8GetPinValue+0x8e>
    1cd4:	55 95       	asr	r21
    1cd6:	47 95       	ror	r20
    1cd8:	8a 95       	dec	r24
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <MDIO_u8GetPinValue+0x8a>
    1cdc:	ca 01       	movw	r24, r20
    1cde:	81 70       	andi	r24, 0x01	; 1
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	23 c0       	rjmp	.+70     	; 0x1d2a <MDIO_u8GetPinValue+0xe0>
		case PORTC: LOC_U8RetValue=GET_BIT(PINC_REG,Copy_U8Pin); break;
    1ce4:	e3 e3       	ldi	r30, 0x33	; 51
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <MDIO_u8GetPinValue+0xb2>
    1cf8:	55 95       	asr	r21
    1cfa:	47 95       	ror	r20
    1cfc:	8a 95       	dec	r24
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <MDIO_u8GetPinValue+0xae>
    1d00:	ca 01       	movw	r24, r20
    1d02:	81 70       	andi	r24, 0x01	; 1
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	11 c0       	rjmp	.+34     	; 0x1d2a <MDIO_u8GetPinValue+0xe0>
		case PORTD: LOC_U8RetValue=GET_BIT(PIND_REG,Copy_U8Pin); break;
    1d08:	e0 e3       	ldi	r30, 0x30	; 48
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	88 2f       	mov	r24, r24
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a9 01       	movw	r20, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <MDIO_u8GetPinValue+0xd6>
    1d1c:	55 95       	asr	r21
    1d1e:	47 95       	ror	r20
    1d20:	8a 95       	dec	r24
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <MDIO_u8GetPinValue+0xd2>
    1d24:	ca 01       	movw	r24, r20
    1d26:	81 70       	andi	r24, 0x01	; 1
    1d28:	89 83       	std	Y+1, r24	; 0x01
		default : /* Do NOthing*/;
	}
	return LOC_U8RetValue;
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <MDIO_VoidSetPortDirection>:
void MDIO_VoidSetPortDirection(u8 Copy_U8Port,u8 Copy_U8Dir)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <MDIO_VoidSetPortDirection+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <MDIO_VoidSetPortDirection+0x8>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	3c 83       	std	Y+4, r19	; 0x04
    1d54:	2b 83       	std	Y+3, r18	; 0x03
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	d1 f0       	breq	.+52     	; 0x1d94 <MDIO_VoidSetPortDirection+0x58>
    1d60:	2b 81       	ldd	r18, Y+3	; 0x03
    1d62:	3c 81       	ldd	r19, Y+4	; 0x04
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <MDIO_VoidSetPortDirection+0x38>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	00 97       	sbiw	r24, 0x00	; 0
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <MDIO_VoidSetPortDirection+0x4e>
    1d72:	1e c0       	rjmp	.+60     	; 0x1db0 <MDIO_VoidSetPortDirection+0x74>
    1d74:	2b 81       	ldd	r18, Y+3	; 0x03
    1d76:	3c 81       	ldd	r19, Y+4	; 0x04
    1d78:	22 30       	cpi	r18, 0x02	; 2
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	81 f0       	breq	.+32     	; 0x1d9e <MDIO_VoidSetPortDirection+0x62>
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	83 30       	cpi	r24, 0x03	; 3
    1d84:	91 05       	cpc	r25, r1
    1d86:	81 f0       	breq	.+32     	; 0x1da8 <MDIO_VoidSetPortDirection+0x6c>
    1d88:	13 c0       	rjmp	.+38     	; 0x1db0 <MDIO_VoidSetPortDirection+0x74>
	{
	case PORTA: DDRA_REG = Copy_U8Dir; break;
    1d8a:	ea e3       	ldi	r30, 0x3A	; 58
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	80 83       	st	Z, r24
    1d92:	0e c0       	rjmp	.+28     	; 0x1db0 <MDIO_VoidSetPortDirection+0x74>
	case PORTB: DDRB_REG = Copy_U8Dir; break;
    1d94:	e7 e3       	ldi	r30, 0x37	; 55
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	80 83       	st	Z, r24
    1d9c:	09 c0       	rjmp	.+18     	; 0x1db0 <MDIO_VoidSetPortDirection+0x74>
	case PORTC: DDRC_REG = Copy_U8Dir; break;
    1d9e:	e4 e3       	ldi	r30, 0x34	; 52
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	80 83       	st	Z, r24
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <MDIO_VoidSetPortDirection+0x74>
	case PORTD: DDRD_REG = Copy_U8Dir; break;
    1da8:	e2 e3       	ldi	r30, 0x32	; 50
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
	default : /* Do NOthing*/;
}
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <MDIO_VoidSetPortValue>:

void MDIO_VoidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Val)
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <MDIO_VoidSetPortValue+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <MDIO_VoidSetPortValue+0x8>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3c 83       	std	Y+4, r19	; 0x04
    1dd6:	2b 83       	std	Y+3, r18	; 0x03
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	91 05       	cpc	r25, r1
    1de0:	d1 f0       	breq	.+52     	; 0x1e16 <MDIO_VoidSetPortValue+0x58>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <MDIO_VoidSetPortValue+0x38>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <MDIO_VoidSetPortValue+0x4e>
    1df4:	1e c0       	rjmp	.+60     	; 0x1e32 <MDIO_VoidSetPortValue+0x74>
    1df6:	2b 81       	ldd	r18, Y+3	; 0x03
    1df8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	81 f0       	breq	.+32     	; 0x1e20 <MDIO_VoidSetPortValue+0x62>
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	9c 81       	ldd	r25, Y+4	; 0x04
    1e04:	83 30       	cpi	r24, 0x03	; 3
    1e06:	91 05       	cpc	r25, r1
    1e08:	81 f0       	breq	.+32     	; 0x1e2a <MDIO_VoidSetPortValue+0x6c>
    1e0a:	13 c0       	rjmp	.+38     	; 0x1e32 <MDIO_VoidSetPortValue+0x74>
	{
	case PORTA: PORTA_REG = Copy_U8Val; break;
    1e0c:	eb e3       	ldi	r30, 0x3B	; 59
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	80 83       	st	Z, r24
    1e14:	0e c0       	rjmp	.+28     	; 0x1e32 <MDIO_VoidSetPortValue+0x74>
	case PORTB: PORTB_REG = Copy_U8Val; break;
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	80 83       	st	Z, r24
    1e1e:	09 c0       	rjmp	.+18     	; 0x1e32 <MDIO_VoidSetPortValue+0x74>
	case PORTC: PORTC_REG = Copy_U8Val; break;
    1e20:	e5 e3       	ldi	r30, 0x35	; 53
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	80 83       	st	Z, r24
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <MDIO_VoidSetPortValue+0x74>
	case PORTD: PORTD_REG = Copy_U8Val; break;
    1e2a:	e1 e3       	ldi	r30, 0x31	; 49
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	80 83       	st	Z, r24
	default : /* Do NOthing*/;
}
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <MDIO_VoidSetTogglePin>:
void MDIO_VoidSetTogglePin(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <MDIO_VoidSetTogglePin+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <MDIO_VoidSetTogglePin+0x8>
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	3c 83       	std	Y+4, r19	; 0x04
    1e58:	2b 83       	std	Y+3, r18	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	91 05       	cpc	r25, r1
    1e62:	49 f1       	breq	.+82     	; 0x1eb6 <MDIO_VoidSetTogglePin+0x76>
    1e64:	2b 81       	ldd	r18, Y+3	; 0x03
    1e66:	3c 81       	ldd	r19, Y+4	; 0x04
    1e68:	22 30       	cpi	r18, 0x02	; 2
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <MDIO_VoidSetTogglePin+0x38>
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <MDIO_VoidSetTogglePin+0x4e>
    1e76:	5a c0       	rjmp	.+180    	; 0x1f2c <MDIO_VoidSetTogglePin+0xec>
    1e78:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	71 f1       	breq	.+92     	; 0x1ede <MDIO_VoidSetTogglePin+0x9e>
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	83 30       	cpi	r24, 0x03	; 3
    1e88:	91 05       	cpc	r25, r1
    1e8a:	e9 f1       	breq	.+122    	; 0x1f06 <MDIO_VoidSetTogglePin+0xc6>
    1e8c:	4f c0       	rjmp	.+158    	; 0x1f2c <MDIO_VoidSetTogglePin+0xec>
		{
			case PORTA: TOGGLE_BIT(PORTA_REG,Copy_U8Pin); break;
    1e8e:	ab e3       	ldi	r26, 0x3B	; 59
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	eb e3       	ldi	r30, 0x3B	; 59
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <MDIO_VoidSetTogglePin+0x6c>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <MDIO_VoidSetTogglePin+0x68>
    1eb0:	84 27       	eor	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	3b c0       	rjmp	.+118    	; 0x1f2c <MDIO_VoidSetTogglePin+0xec>
			case PORTB: TOGGLE_BIT(PORTB_REG,Copy_U8Pin); break;
    1eb6:	a8 e3       	ldi	r26, 0x38	; 56
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e8 e3       	ldi	r30, 0x38	; 56
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 2e       	mov	r0, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <MDIO_VoidSetTogglePin+0x94>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	0a 94       	dec	r0
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <MDIO_VoidSetTogglePin+0x90>
    1ed8:	84 27       	eor	r24, r20
    1eda:	8c 93       	st	X, r24
    1edc:	27 c0       	rjmp	.+78     	; 0x1f2c <MDIO_VoidSetTogglePin+0xec>
			case PORTC: TOGGLE_BIT(PORTC_REG,Copy_U8Pin); break;
    1ede:	a5 e3       	ldi	r26, 0x35	; 53
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e5 e3       	ldi	r30, 0x35	; 53
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 2f       	mov	r20, r24
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 2e       	mov	r0, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <MDIO_VoidSetTogglePin+0xbc>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	0a 94       	dec	r0
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <MDIO_VoidSetTogglePin+0xb8>
    1f00:	84 27       	eor	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	13 c0       	rjmp	.+38     	; 0x1f2c <MDIO_VoidSetTogglePin+0xec>
			case PORTD: TOGGLE_BIT(PORTD_REG,Copy_U8Pin); break;
    1f06:	a1 e3       	ldi	r26, 0x31	; 49
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e1 e3       	ldi	r30, 0x31	; 49
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <MDIO_VoidSetTogglePin+0xe4>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <MDIO_VoidSetTogglePin+0xe0>
    1f28:	84 27       	eor	r24, r20
    1f2a:	8c 93       	st	X, r24
			default : /* Do NOthing*/;
		}
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <main>:
#include "MDIO_Interface.h"
#include "HLCD_Interface.h"
#include <avr/delay.h>

void main(void)
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	64 97       	sbiw	r28, 0x14	; 20
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
 MADC_voidInit();
    1f4e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <MADC_voidInit>
 HLCD_VoidInit();
    1f52:	0e 94 a9 08 	call	0x1152	; 0x1152 <HLCD_VoidInit>
 u16 x=0,millivolt=0,temp=0;
    1f56:	1c 8a       	std	Y+20, r1	; 0x14
    1f58:	1b 8a       	std	Y+19, r1	; 0x13
    1f5a:	1a 8a       	std	Y+18, r1	; 0x12
    1f5c:	19 8a       	std	Y+17, r1	; 0x11
    1f5e:	18 8a       	std	Y+16, r1	; 0x10
    1f60:	1f 86       	std	Y+15, r1	; 0x0f
while (1)
{
	x=MADC_ReadData(0);
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	0e 94 ef 0b 	call	0x17de	; 0x17de <MADC_ReadData>
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
 millivolt= (x*5000ul)/1024;
    1f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f70:	cc 01       	movw	r24, r24
    1f72:	a0 e0       	ldi	r26, 0x00	; 0
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	28 e8       	ldi	r18, 0x88	; 136
    1f78:	33 e1       	ldi	r19, 0x13	; 19
    1f7a:	40 e0       	ldi	r20, 0x00	; 0
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__mulsi3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	07 2e       	mov	r0, r23
    1f8c:	7a e0       	ldi	r23, 0x0A	; 10
    1f8e:	b6 95       	lsr	r27
    1f90:	a7 95       	ror	r26
    1f92:	97 95       	ror	r25
    1f94:	87 95       	ror	r24
    1f96:	7a 95       	dec	r23
    1f98:	d1 f7       	brne	.-12     	; 0x1f8e <main+0x54>
    1f9a:	70 2d       	mov	r23, r0
    1f9c:	9a 8b       	std	Y+18, r25	; 0x12
    1f9e:	89 8b       	std	Y+17, r24	; 0x11
temp=millivolt/10;
    1fa0:	89 89       	ldd	r24, Y+17	; 0x11
    1fa2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa4:	2a e0       	ldi	r18, 0x0A	; 10
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	b9 01       	movw	r22, r18
    1faa:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__udivmodhi4>
    1fae:	cb 01       	movw	r24, r22
    1fb0:	98 8b       	std	Y+16, r25	; 0x10
    1fb2:	8f 87       	std	Y+15, r24	; 0x0f
 HLCD_SendNumber(temp);
    1fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb6:	98 89       	ldd	r25, Y+16	; 0x10
    1fb8:	cc 01       	movw	r24, r24
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <HLCD_SendNumber>
 HLCD_VoidStringChar("c");
    1fc6:	80 e6       	ldi	r24, 0x60	; 96
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 a0 0a 	call	0x1540	; 0x1540 <HLCD_VoidStringChar>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a8 ec       	ldi	r26, 0xC8	; 200
    1fd4:	b2 e4       	ldi	r27, 0x42	; 66
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
    1fd8:	9c 87       	std	Y+12, r25	; 0x0c
    1fda:	ad 87       	std	Y+13, r26	; 0x0d
    1fdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a ef       	ldi	r20, 0xFA	; 250
    1fec:	54 e4       	ldi	r21, 0x44	; 68
    1fee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f 83       	std	Y+7, r24	; 0x07
    1ff8:	98 87       	std	Y+8, r25	; 0x08
    1ffa:	a9 87       	std	Y+9, r26	; 0x09
    1ffc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <main+0xe6>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	3f c0       	rjmp	.+126    	; 0x209e <main+0x164>
	else if (__tmp > 65535)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6b 85       	ldd	r22, Y+11	; 0x0b
    203a:	7c 85       	ldd	r23, Y+12	; 0x0c
    203c:	8d 85       	ldd	r24, Y+13	; 0x0d
    203e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <main+0x146>
    2062:	88 ec       	ldi	r24, 0xC8	; 200
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <main+0x134>
    2072:	9c 83       	std	Y+4, r25	; 0x04
    2074:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	9e 83       	std	Y+6, r25	; 0x06
    207e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <main+0x128>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <main+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <main+0x170>
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(100);
HLCD_VoidSendCommand(0b00000001);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	0e 94 22 07 	call	0xe44	; 0xe44 <HLCD_VoidSendCommand>
    20b8:	54 cf       	rjmp	.-344    	; 0x1f62 <main+0x28>

000020ba <__mulsi3>:
    20ba:	62 9f       	mul	r22, r18
    20bc:	d0 01       	movw	r26, r0
    20be:	73 9f       	mul	r23, r19
    20c0:	f0 01       	movw	r30, r0
    20c2:	82 9f       	mul	r24, r18
    20c4:	e0 0d       	add	r30, r0
    20c6:	f1 1d       	adc	r31, r1
    20c8:	64 9f       	mul	r22, r20
    20ca:	e0 0d       	add	r30, r0
    20cc:	f1 1d       	adc	r31, r1
    20ce:	92 9f       	mul	r25, r18
    20d0:	f0 0d       	add	r31, r0
    20d2:	83 9f       	mul	r24, r19
    20d4:	f0 0d       	add	r31, r0
    20d6:	74 9f       	mul	r23, r20
    20d8:	f0 0d       	add	r31, r0
    20da:	65 9f       	mul	r22, r21
    20dc:	f0 0d       	add	r31, r0
    20de:	99 27       	eor	r25, r25
    20e0:	72 9f       	mul	r23, r18
    20e2:	b0 0d       	add	r27, r0
    20e4:	e1 1d       	adc	r30, r1
    20e6:	f9 1f       	adc	r31, r25
    20e8:	63 9f       	mul	r22, r19
    20ea:	b0 0d       	add	r27, r0
    20ec:	e1 1d       	adc	r30, r1
    20ee:	f9 1f       	adc	r31, r25
    20f0:	bd 01       	movw	r22, r26
    20f2:	cf 01       	movw	r24, r30
    20f4:	11 24       	eor	r1, r1
    20f6:	08 95       	ret

000020f8 <__udivmodhi4>:
    20f8:	aa 1b       	sub	r26, r26
    20fa:	bb 1b       	sub	r27, r27
    20fc:	51 e1       	ldi	r21, 0x11	; 17
    20fe:	07 c0       	rjmp	.+14     	; 0x210e <__udivmodhi4_ep>

00002100 <__udivmodhi4_loop>:
    2100:	aa 1f       	adc	r26, r26
    2102:	bb 1f       	adc	r27, r27
    2104:	a6 17       	cp	r26, r22
    2106:	b7 07       	cpc	r27, r23
    2108:	10 f0       	brcs	.+4      	; 0x210e <__udivmodhi4_ep>
    210a:	a6 1b       	sub	r26, r22
    210c:	b7 0b       	sbc	r27, r23

0000210e <__udivmodhi4_ep>:
    210e:	88 1f       	adc	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	5a 95       	dec	r21
    2114:	a9 f7       	brne	.-22     	; 0x2100 <__udivmodhi4_loop>
    2116:	80 95       	com	r24
    2118:	90 95       	com	r25
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	08 95       	ret

00002120 <__udivmodsi4>:
    2120:	a1 e2       	ldi	r26, 0x21	; 33
    2122:	1a 2e       	mov	r1, r26
    2124:	aa 1b       	sub	r26, r26
    2126:	bb 1b       	sub	r27, r27
    2128:	fd 01       	movw	r30, r26
    212a:	0d c0       	rjmp	.+26     	; 0x2146 <__udivmodsi4_ep>

0000212c <__udivmodsi4_loop>:
    212c:	aa 1f       	adc	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	ee 1f       	adc	r30, r30
    2132:	ff 1f       	adc	r31, r31
    2134:	a2 17       	cp	r26, r18
    2136:	b3 07       	cpc	r27, r19
    2138:	e4 07       	cpc	r30, r20
    213a:	f5 07       	cpc	r31, r21
    213c:	20 f0       	brcs	.+8      	; 0x2146 <__udivmodsi4_ep>
    213e:	a2 1b       	sub	r26, r18
    2140:	b3 0b       	sbc	r27, r19
    2142:	e4 0b       	sbc	r30, r20
    2144:	f5 0b       	sbc	r31, r21

00002146 <__udivmodsi4_ep>:
    2146:	66 1f       	adc	r22, r22
    2148:	77 1f       	adc	r23, r23
    214a:	88 1f       	adc	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	1a 94       	dec	r1
    2150:	69 f7       	brne	.-38     	; 0x212c <__udivmodsi4_loop>
    2152:	60 95       	com	r22
    2154:	70 95       	com	r23
    2156:	80 95       	com	r24
    2158:	90 95       	com	r25
    215a:	9b 01       	movw	r18, r22
    215c:	ac 01       	movw	r20, r24
    215e:	bd 01       	movw	r22, r26
    2160:	cf 01       	movw	r24, r30
    2162:	08 95       	ret

00002164 <__prologue_saves__>:
    2164:	2f 92       	push	r2
    2166:	3f 92       	push	r3
    2168:	4f 92       	push	r4
    216a:	5f 92       	push	r5
    216c:	6f 92       	push	r6
    216e:	7f 92       	push	r7
    2170:	8f 92       	push	r8
    2172:	9f 92       	push	r9
    2174:	af 92       	push	r10
    2176:	bf 92       	push	r11
    2178:	cf 92       	push	r12
    217a:	df 92       	push	r13
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	ca 1b       	sub	r28, r26
    218e:	db 0b       	sbc	r29, r27
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	09 94       	ijmp

0000219c <__epilogue_restores__>:
    219c:	2a 88       	ldd	r2, Y+18	; 0x12
    219e:	39 88       	ldd	r3, Y+17	; 0x11
    21a0:	48 88       	ldd	r4, Y+16	; 0x10
    21a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    21a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    21a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    21aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    21ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    21ae:	b9 84       	ldd	r11, Y+9	; 0x09
    21b0:	c8 84       	ldd	r12, Y+8	; 0x08
    21b2:	df 80       	ldd	r13, Y+7	; 0x07
    21b4:	ee 80       	ldd	r14, Y+6	; 0x06
    21b6:	fd 80       	ldd	r15, Y+5	; 0x05
    21b8:	0c 81       	ldd	r16, Y+4	; 0x04
    21ba:	1b 81       	ldd	r17, Y+3	; 0x03
    21bc:	aa 81       	ldd	r26, Y+2	; 0x02
    21be:	b9 81       	ldd	r27, Y+1	; 0x01
    21c0:	ce 0f       	add	r28, r30
    21c2:	d1 1d       	adc	r29, r1
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	ed 01       	movw	r28, r26
    21d0:	08 95       	ret

000021d2 <_exit>:
    21d2:	f8 94       	cli

000021d4 <__stop_program>:
    21d4:	ff cf       	rjmp	.-2      	; 0x21d4 <__stop_program>
